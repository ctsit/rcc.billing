% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/redcap_projects.R
\name{get_privileged_user}
\alias{get_privileged_user}
\title{get_privileged_user}
\usage{
get_privileged_user(
  redcap_projects,
  redcap_user_information,
  redcap_staff_employment_periods,
  redcap_user_rights,
  redcap_user_roles,
  filter_for_faculty = FALSE,
  include_low_privilege_users = FALSE,
  include_suspended_users = FALSE,
  return_project_ownership_format = FALSE
)
}
\arguments{
\item{redcap_projects, }{The contents of the REDCap table of the same name.}

\item{redcap_user_information, }{The contents of the REDCap table of the same name.}

\item{redcap_staff_employment_periods, }{a dataset of redcap usernames and employment
intervals with one interval per row}

\item{redcap_user_rights, }{The contents of the REDCap table of the same name.}

\item{redcap_user_roles, }{The contents of the REDCap table of the same name.}

\item{filter_for_faculty, }{Require users be faculty}

\item{include_low_privilege_users, }{Include users whose accounts have any permission on a project}

\item{include_suspended_users, }{Include users whose accounts are suspended}

\item{return_project_ownership_format, }{Rename the columns to match the
redcap_entity_project_ownership format}
}
\value{
a dataframe of privileged,  _user_ accounts on the projects provided
}
\description{
Returns a dataframe of project IDs and usernames of users with design or user_rights
 who are non-suspended, non-redcap-staff, with a primary email address.
 Optionally require users be faculty.
 Optionally include users with any privilege on the project.
 Optionally include suspended users.
}
\examples{
\dontrun{
unsuspended_high_privilege_faculty <- get_privileged_user(
  redcap_projects = redcap_projects,
  redcap_user_information = redcap_user_information,
  redcap_staff_employment_periods = ctsit_staff_employment_periods,
  redcap_user_rights = redcap_user_rights,
  redcap_user_roles = redcap_user_roles,
  filter_for_faculty = T,
  return_project_ownership_format = T
)

unsuspended_high_privilege_user <- get_privileged_user(
  redcap_projects = redcap_projects,
  redcap_user_information = redcap_user_information,
  redcap_staff_employment_periods = ctsit_staff_employment_periods,
  redcap_user_rights = redcap_user_rights,
  redcap_user_roles = redcap_user_roles,
  return_project_ownership_format = T
)

unsuspended_low_privilege_user <- get_privileged_user(
  redcap_projects = redcap_projects,
  redcap_user_information = redcap_user_information,
  redcap_staff_employment_periods = ctsit_staff_employment_periods,
  redcap_user_rights = redcap_user_rights,
  redcap_user_roles = redcap_user_roles,
  include_low_privilege_users = T,
  include_suspended_users = FALSE,
  return_project_ownership_format = T
)

any_low_privilege_user <- get_privileged_user(
  redcap_projects = redcap_projects,
  redcap_user_information = redcap_user_information,
  redcap_staff_employment_periods = ctsit_staff_employment_periods,
  redcap_user_rights = redcap_user_rights,
  redcap_user_roles = redcap_user_roles,
  include_low_privilege_users = T,
  include_suspended_users = T,
  return_project_ownership_format = T
)
}
}
