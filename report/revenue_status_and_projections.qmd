---
title: "REDCap Annual Project Billing Revenue, Status, and Projections"
author: "Philip Chase"
format:
  html:
    code-fold: true
    code-tools: true
    df-print: kable
editor: visual
date: "`r Sys.Date()`"
---

The CTS-IT manages the REDCap system for the UF Clinical Translational Science Institute (CTSI). To generate revenue to cover some of the costs of the running the REDCap System, CTS-IT charges its customers for the REDCap projects they use. These annual charges are assessed on each anniversary of each project via a system named *REDCap Annual Project Billing (APB)*. This report describes that project by assessing the revenue, estimating future revenue, as well as other metrics of growth and performance.

While the original billing system started in July 2019, that system was rewritten from the ground up in 2022. The revision focuses on automated processes to implement a monthly billing cycle and delegates the billing work to the UF CTSI Service Billing Team. The new system was implemented in September 2022.

```{r}
#| label: calcs
#| output: false
library(redcapcustodian)
library(rcc.billing)
library(RMariaDB)
library(DBI)
library(tidyverse)
library(lubridate)
library(dotenv)
library(fs)
library(scales)

load_dot_env(here::here("prod.env"))

init_etl("revenue_status_and_projections")

rcc_billing_conn <- connect_to_rcc_billing_db()

invoice_status <-
  tbl(rcc_billing_conn, "invoice_line_item") %>%
  collect() %>%
  mutate(invoice_month = lubridate::floor_date(created - dmonths(1), unit = "month")) %>%
  filter(status %in% c("invoiced", "paid"))

revenue <-
  tbl(rcc_billing_conn, "invoice_line_item") %>%
  collect() %>%
  mutate(invoice_month = lubridate::floor_date(created - dmonths(1), unit = "month")) %>%
  filter(status != "canceled") %>%
  group_by(status, invoice_month) %>%
  summarise(total = sum(amount_due)) %>%
  tidyr::pivot_wider(
    id_cols = c("invoice_month"),
    names_from = status,
    values_from = total
  ) %>%
  mutate(
    invoices_sent = invoiced + coalesce(paid, 0),
    portion_paid = coalesce(paid, 0) / invoices_sent
  )

# the average portion paid should ignore the last three months as sequester_unpaid_projects has not yet been applied to these months
average_portion_paid <- revenue %>%
  slice_head(n = nrow(revenue) - 4) %>%
  summarise(average_portion_paid = mean(portion_paid)) %>%
  pull(average_portion_paid)

expected_revenue <- revenue %>%
  mutate(expected_revenue = case_when(
    row_number() <= nrow(revenue) - 4 ~ paid,
    TRUE ~ round(invoices_sent * average_portion_paid)
  ))

revenue_and_projections <-
  expected_revenue %>%
  summarise(
    expected_annual_revenue = 12 * sum(expected_revenue, na.rm = T) / n(),
    actual_revenue = sum(paid, na.rm = T),
    accounts_receivable = sum(invoiced, na.rm = T)
  )
```

## Revenue and Receivables

To date, the new system has generated `r scales::dollar(revenue_and_projections$actual_revenue)`. The current Accounts Receivable is `r scales::dollar(revenue_and_projections$accounts_receivable)`. The REDCap ABP monthly revenue is shown in @fig-revenue-by-month

```{r}
#| label: fig-revenue-by-month
#| fig-cap: REDCap APB Revenue by month. Note that invoices for each month a sent 5-10 
#|   days after the end of the month. The first payment is typically not received
#|   processed for another two weeks.
#| echo: false
#| warning: false
invoice_status %>%
  select(invoice_month, status, amount_due) %>%
  mutate(Status = case_when(
    status == "invoiced" ~ "Not Paid",
    status == "paid" ~ "Paid",
  )) %>%
  ggplot(mapping = aes(x = as_date(invoice_month), fill = Status, y =amount_due)) +
  geom_bar(position = "stack", stat = "identity") +
  scale_y_continuous(
    labels = dollar,
    limits = c(0, max(revenue$invoices_sent))
    ) +
  scale_x_date(date_breaks = "2 months") +
  xlab("Month Invoiced") +
  ylab("Amount")

```

## Payments Rates and Projections

Projecting potential revenue for the project, requires an estimate of the portion of invoices that are likley to be paid. The history of payment in past months informs estimates of future payment, yet there are some issues in those data. The REDCap APB project uses several methods to reduce the number of abandoned projects that get invoiced. Yet many of these methods were developed after the start of the project. Other methods had implementation issues in the early months of the project. As such, it is reasonable to expect the early months of the project will have lower payment rates then later months due to these process refinements. We will use the historic payment rates to estimate future payment with the understanding that these estimates of payment rate are probably conservative.

We will estimate the payment rate based on the historic data, but we will ignore the last 4 months of invoicing. This will allow the invoices to age and allow payment incentives like past due reminders and sequestration for non-payment to have their effect to incentivize payment. Using this constraint, the average historic payment rate we will use for estimating revenue is `r scales::percent(average_portion_paid)`

Using the historic payment rate, and the actual number of invoices sent, we can project revenue for recent and future months to get a projected annual revenue of `r scales::dollar(revenue_and_projections$expected_annual_revenue)`

## Aging Report

The unpaid invoices breakdown as shown in @fig-aging-report

```{r}
#| label: fig-aging-report
#| fig-cap: Unpaid invoices grouped by age
#| echo: false
#| warning: false

invoice_status %>%
  filter(status == "invoiced") %>%
  select(invoice_month, status, amount_due, created) %>%
  mutate(age_in_days = now() - created) %>%
  mutate(`Aging Group` = as_factor(case_when(
    age_in_days <= 30 ~ "0-30 days",
    age_in_days <= 60 ~ "31-60 days",
    age_in_days <= 90 ~ "61-90 days",
    age_in_days <= 120 ~ "91-120 days",
    TRUE ~ "120+ days"
  ))) %>%
  count(`Aging Group`, name = "Invoices") %>%
  arrange(desc(`Aging Group`))

```

## Report summary

-   Revenue since inception: `r scales::dollar(revenue_and_projections$actual_revenue)`

-   Accounts Receivable since inception: `r scales::dollar(revenue_and_projections$accounts_receivable)`

-   Average historic payment rate: `r scales::percent(average_portion_paid)`

-   Projected annual revenue: `r scales::dollar(revenue_and_projections$expected_annual_revenue)`
